sources:
  nextzen:
    type: MVT
    url: https://tile.nextzen.org/tilezen/vector/v1/256/all/{z}/{x}/{y}.mvt
    url_params:
      api_key: Iv7Pyu05Rxetbcu3liT5Vw
    max_zoom: 8
    rasters: [normals, elevation]
  elevation:
    type: Raster
    url: https://tile.nextzen.org/tilezen/terrain/v1/256/terrarium/{z}/{x}/{y}.png
    url_params:
      api_key: Iv7Pyu05Rxetbcu3liT5Vw
    max_zoom: 14

textures:
  hypsometric:
    url: ../img/gradient.png
    # filtering: nearest
  decoder:
    url: ../img/decoder.png

styles:
  combo:
    base: raster
    shaders:
      uniforms:
        u_scale: 2
        u_palette: hypsometric
        u_max: 8900. # everest = 8848
        u_min: 0. # sea level
      blocks:
        global: |
          float unpack(vec4 h) {
              // GPU reads each 0-255 channel as range 0-1, right where we want it
              // assemble to get un-normalized height
              //return (h.r * 1. + h.g / 256. + h.b / 65536.);
              return (h.r * 256. + h.g + h.b / 256.) * 255. - 32768.;
          }
        color: |
          // elevation from elevation tiles
          float height = unpack(color);
          // normalize to 0 - 1
          //height = (height - 0.3321533203125)/(0.635833740234375 - 0.3321533203125);

          // normalize to [0. - 1.]
          height = (height - u_min)/(u_max - u_min);

          // height from elevation tiles
          color.rgb = vec3(height);
          //// exaggerate
          // color.rgb = color.rgb * u_scale - (u_scale - 1.);
          // hypsometric gradient from texture
          //color.rgb = texture2D(u_palette, vec2(color.r,0.5)).rgb;
layers:
  terrain:
    data: { source: elevation, layer: _default }
    draw:
      combo:
        order: 0
  water:
    data: { source: nextzen }
    draw:
      polygons:
        order: 4
        color: lightblue
